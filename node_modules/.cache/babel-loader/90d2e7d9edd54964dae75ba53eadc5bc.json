{"ast":null,"code":"var _jsxFileName = \"/Users/williamspigner/Desktop/NewChat2/chatroom/src/Container/Dashboard/Store.js\";\nimport React, { createContext, useReducer } from \"react\";\nimport io from \"socket.io-client\";\nexport const ctx = createContext();\n/**\n\n  initState = {\n    topic1: [\n      {form: \"\", msg: \"hi\"}\n    ]\n  }\n\n */\n\nexport const RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\";\nconst initialState = {\n  topic1: [],\n  topic2: []\n};\n\nconst reducer = (state, action) => {\n  const {\n    from,\n    msg,\n    topic\n  } = action.payload;\n\n  switch (action.type) {\n    case RECEIVE_MESSAGE:\n      return { ...state,\n        [topic]: [...state[topic], {\n          from,\n          msg\n        }]\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet socket;\nconst user = \"user\" + Math.random().toFixed(2) * 100;\n\nfunction sendMessageAction(value) {\n  socket.emit(\"chat message\", value);\n}\n\nconst Store = props => {\n  const [allCharts, dispatch] = useReducer(reducer, initialState);\n\n  if (!socket) {\n    socket = io(\":3001\");\n    socket.on(\"chat message\", function (msg) {\n      dispatch({\n        type: RECEIVE_MESSAGE,\n        payload: msg\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ctx.Provider, {\n    value: {\n      allCharts,\n      sendMessageAction,\n      user\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default Store;","map":{"version":3,"sources":["/Users/williamspigner/Desktop/NewChat2/chatroom/src/Container/Dashboard/Store.js"],"names":["React","createContext","useReducer","io","ctx","RECEIVE_MESSAGE","initialState","topic1","topic2","reducer","state","action","from","msg","topic","payload","type","socket","user","Math","random","toFixed","sendMessageAction","value","emit","Store","props","allCharts","dispatch","on","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,MAAMC,GAAG,GAAGH,aAAa,EAAzB;AAEP;;;;;;;;;;AAUA,OAAO,MAAMI,eAAe,GAAG,iBAAxB;AACP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAArB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA;AAAb,MAAuBH,MAAM,CAACI,OAApC;;AACA,UAAQJ,MAAM,CAACK,IAAf;AACE,SAAKX,eAAL;AACE,aAAO,EACL,GAAGK,KADE;AAEL,SAACI,KAAD,GAAS,CAAC,GAAGJ,KAAK,CAACI,KAAD,CAAT,EAAkB;AAAEF,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SAAlB;AAFJ,OAAP;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAXD;;AAaA,IAAIO,MAAJ;AACA,MAAMC,IAAI,GAAG,SAASC,IAAI,CAACC,MAAL,GAAcC,OAAd,CAAsB,CAAtB,IAA2B,GAAjD;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChCN,EAAAA,MAAM,CAACO,IAAP,CAAY,cAAZ,EAA4BD,KAA5B;AACD;;AAED,MAAME,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwB1B,UAAU,CAACO,OAAD,EAAUH,YAAV,CAAxC;;AAEA,MAAI,CAACW,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGd,EAAE,CAAC,OAAD,CAAX;AACAc,IAAAA,MAAM,CAACY,EAAP,CAAU,cAAV,EAA0B,UAAShB,GAAT,EAAc;AACtCe,MAAAA,QAAQ,CAAC;AAAEZ,QAAAA,IAAI,EAAEX,eAAR;AAAyBU,QAAAA,OAAO,EAAEF;AAAlC,OAAD,CAAR;AACD,KAFD;AAGD;;AAED,sBACE,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAAEc,MAAAA,SAAF;AAAaL,MAAAA,iBAAb;AAAgCJ,MAAAA;AAAhC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,KAAK,CAACI,QADT,CADF;AAKD,CAfD;;AAgBA,eAAeL,KAAf","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport io from \"socket.io-client\";\nexport const ctx = createContext();\n\n/**\n\n  initState = {\n    topic1: [\n      {form: \"\", msg: \"hi\"}\n    ]\n  }\n\n */\n\nexport const RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\";\nconst initialState = {\n  topic1: [\n    \n  ],\n  topic2: [\n    \n    \n  ]\n};\nconst reducer = (state, action) => {\n  const { from, msg, topic } = action.payload;\n  switch (action.type) {\n    case RECEIVE_MESSAGE:\n      return {\n        ...state,\n        [topic]: [...state[topic], { from, msg }]\n      };\n    default:\n      return state;\n  }\n};\n\nlet socket;\nconst user = \"user\" + Math.random().toFixed(2) * 100\n\nfunction sendMessageAction(value) {\n  socket.emit(\"chat message\", value);\n}\n\nconst Store = props => {\n  const [allCharts, dispatch] = useReducer(reducer, initialState);\n\n  if (!socket) {\n    socket = io(\":3001\");\n    socket.on(\"chat message\", function(msg) {\n      dispatch({ type: RECEIVE_MESSAGE, payload: msg });\n    });\n  }\n\n  return (\n    <ctx.Provider value={{ allCharts, sendMessageAction, user }}>\n      {props.children}\n    </ctx.Provider>\n  );\n};\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}